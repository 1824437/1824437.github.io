<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>经历过浏览器标准之乱，又TM正在经历终端之乱及所带来的框架之乱</title>
  
  <subtitle>ZhuTao&#39;s Blog&lt;zhutao@live.cn&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="1824437.github.io/"/>
  <updated>2019-10-27T10:48:15.820Z</updated>
  <id>1824437.github.io/</id>
  
  <author>
    <name>ZhuTao&lt;zhutao@live.cn&gt;</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css3</title>
    <link href="1824437.github.io/web/css3/css3/"/>
    <id>1824437.github.io/web/css3/css3/</id>
    <published>2019-10-27T10:47:26.133Z</published>
    <updated>2019-10-27T10:48:15.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器与项目（容器成员）"><a href="#容器与项目（容器成员）" class="headerlink" title="容器与项目（容器成员）"></a>容器与项目（容器成员）</h2><h3 id="flex-容器"><a href="#flex-容器" class="headerlink" title="flex 容器"></a>flex 容器</h3><p>设置为flex容器： <code>display:flex;</code></p><p><strong>属性</strong></p><ol><li>flex-direction</li><li>flex-warp</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ol><h3 id="flex容器内的元素则为flex项目。"><a href="#flex容器内的元素则为flex项目。" class="headerlink" title="flex容器内的元素则为flex项目。"></a>flex容器内的元素则为flex项目。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;容器与项目（容器成员）&quot;&gt;&lt;a href=&quot;#容器与项目（容器成员）&quot; class=&quot;headerlink&quot; title=&quot;容器与项目（容器成员）&quot;&gt;&lt;/a&gt;容器与项目（容器成员）&lt;/h2&gt;&lt;h3 id=&quot;flex-容器&quot;&gt;&lt;a href=&quot;#flex-容器&quot; c
      
    
    </summary>
    
    
      <category term="web" scheme="1824437.github.io/categories/web/"/>
    
    
      <category term="css3" scheme="1824437.github.io/tags/css3/"/>
    
      <category term="flex" scheme="1824437.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>常用配置文件格式</title>
    <link href="1824437.github.io/os/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <id>1824437.github.io/os/常用配置文件/常用配置文件格式/</id>
    <published>2019-10-27T08:05:41.060Z</published>
    <updated>2019-10-27T08:09:53.930Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-ini"><a href="#1-ini" class="headerlink" title="1. ini"></a>1. ini</h4><h4 id="2-properties-java下的配置文件"><a href="#2-properties-java下的配置文件" class="headerlink" title="2. properties java下的配置文件"></a>2. properties java下的配置文件</h4><p><strong>格式</strong></p><ol><li><p>注释</p><p> 以!或#开头的行将作为comment注释行 </p></li><li><p>一行一个键值对, 键值对分隔符[=, :, 空格, tab制表符]</p></li><li><p>忽略多余的空格及tab制表符</p></li><li><p>=, :转义字符=和:字符</p></li><li><p>跨行书写时在尾部增加转义符\</p></li><li><p>无值时视为空格</p></li><li><p>非ASCII字符需要使用Unicode转义序列</p><p> \u****</p></li></ol><h4 id="3-json"><a href="#3-json" class="headerlink" title="3. json"></a>3. json</h4><h4 id="4-xml"><a href="#4-xml" class="headerlink" title="4. xml"></a>4. xml</h4><h4 id="5-yaml"><a href="#5-yaml" class="headerlink" title="5. yaml"></a>5. yaml</h4><p><a href="http://www.yaml.org/">http://www.yaml.org/</a></p><h4 id="6-plist"><a href="#6-plist" class="headerlink" title="6.plist"></a>6.plist</h4><h4 id="7-HOCON"><a href="#7-HOCON" class="headerlink" title="7.HOCON"></a>7.HOCON</h4><h4 id="8-toml"><a href="#8-toml" class="headerlink" title="8.toml"></a>8.toml</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-ini&quot;&gt;&lt;a href=&quot;#1-ini&quot; class=&quot;headerlink&quot; title=&quot;1. ini&quot;&gt;&lt;/a&gt;1. ini&lt;/h4&gt;&lt;h4 id=&quot;2-properties-java下的配置文件&quot;&gt;&lt;a href=&quot;#2-properties-jav
      
    
    </summary>
    
    
      <category term="os" scheme="1824437.github.io/categories/os/"/>
    
    
      <category term="ini" scheme="1824437.github.io/tags/ini/"/>
    
      <category term="json" scheme="1824437.github.io/tags/json/"/>
    
      <category term="xml" scheme="1824437.github.io/tags/xml/"/>
    
      <category term="yaml" scheme="1824437.github.io/tags/yaml/"/>
    
      <category term="plist" scheme="1824437.github.io/tags/plist/"/>
    
      <category term="hocon" scheme="1824437.github.io/tags/hocon/"/>
    
      <category term="toml" scheme="1824437.github.io/tags/toml/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="1824437.github.io/popular/webpack/webpack/"/>
    <id>1824437.github.io/popular/webpack/webpack/</id>
    <published>2019-10-27T08:01:38.572Z</published>
    <updated>2019-10-27T08:08:44.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p><a href="https://doc.webpack-china.org/">中文文档</a><br><strong>待读</strong> happypack 原理 <a href="https://yq.aliyun.com/articles/67269">https://yq.aliyun.com/articles/67269</a></p><h2 id="资源处理"><a href="#资源处理" class="headerlink" title="资源处理"></a>资源处理</h2><h3 id="紧密耦合式"><a href="#紧密耦合式" class="headerlink" title="紧密耦合式"></a>紧密耦合式</h3><ol><li><p>css处理方案</p><h4 id="直接通过JS内嵌到文档的head中"><a href="#直接通过JS内嵌到文档的head中" class="headerlink" title="直接通过JS内嵌到文档的head中"></a>直接通过JS内嵌到文档的head中</h4><ol><li><p>安装使用loader: style-loader,css-loader。</p></li><li><p>在js中<code>import &#39;styles.css&#39;</code>即可。bundle时会通过JS写入文档的head中。</p></li></ol></li><li><p>图片、字体处理方案</p><h4 id="js引入"><a href="#js引入" class="headerlink" title="js引入"></a>js引入</h4><ol><li><p>安装使用file-loader</p></li><li><p>在js中 `import img from ‘./assets/images/icon.png’，然后new Image一个对象指向src。bundle后会把文件复制到dist中。</p><p>css中的图片，css-loader也会做同样的事情。无论图片在哪里使用，都会生成一个唯一图片供所有地方引用。</p><p>css中的字体，仍然可以使用file-loader来处理。</p></li></ol></li></ol><ol start="3"><li><p>CSV、TSV、XML文件处理方案</p><h4 id="csv-tsv使用csv-loader"><a href="#csv-tsv使用csv-loader" class="headerlink" title="csv,tsv使用csv-loader"></a>csv,tsv使用csv-loader</h4><h4 id="xml使用xml-loader"><a href="#xml使用xml-loader" class="headerlink" title="xml使用xml-loader"></a>xml使用xml-loader</h4></li><li><p>scss处理</p></li></ol><h2 id="管理输出"><a href="#管理输出" class="headerlink" title="管理输出"></a>管理输出</h2><ol><li>利用html-webpack-plugin来生成index.html文件</li></ol><h2 id="动态热替换"><a href="#动态热替换" class="headerlink" title="动态热替换"></a>动态热替换</h2><p>通过webpack-dev-server实现。<br>如果出现编译异常，可能是包的问题。先看webpack-dev-server的package.json。看webpack与webpack-dev-server的版本号对不对。如果安装的对，如果再有问题，可以参照下面的已装包，看有没有缺失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;webpack-cli&quot;: &quot;^3.3.2&quot;,</span><br><span class="line">    &quot;webpack-dev-middleware&quot;: &quot;^3.6.2&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.3.1&quot;,</span><br><span class="line">    &quot;webpack-hot-middleware&quot;: &quot;^2.24.4&quot;</span><br></pre></td></tr></table></figure><h2 id="代码分离"><a href="#代码分离" class="headerlink" title="代码分离"></a>代码分离</h2><p><a href="https://juejin.im/post/5b99b9cd6fb9a05cff32007a">学习链接</a><br><a href="https://segmentfault.com/a/1190000013476837">2</a></p><h2 id="各字段详解"><a href="#各字段详解" class="headerlink" title="各字段详解"></a>各字段详解</h2><p><strong>output.path,output.publicPath,devServer.publicPath,devServer.contentBase</strong></p><ol><li><p>output.path, 指定打包输出的目录。</p><p> 将源代码打生产包时，生成在哪个文件夹下。所有的包，包含js,css,image,svg,font，及入口文件index.html。</p></li><li><p>output.publicPath</p><p> 这个配置是将代码内所有的资源引用路径都加上一个前缀。默认的publicPath,输出的index.html对js引用是<code>/app.*.js</code>,如果加上<code>outpub.publicPath = &#39;/abc/&#39;</code>,那么输出的index.html对js的引用会变成<code>/abc/app.*.js</code>.不仅是index.html,所有的所有包的引用路径者会这样变。</p><p> 注：<code>output.path: &#39;dist/abc&#39;与将publicPath设置为&#39;/abc/&#39;是不同的</code>。<code>output.path: &#39;dist/abc&#39;</code>只会将包输出到dist/abc目录下，不会改变包的引用。</p></li></ol><ol start="3"><li><p>devServer.publicPath</p><p> 控制在开发环境下给资源引用路径加上前缀。如果没有配置这个选项，则使用output.publicPath。</p></li><li><p>devServer.contentBase</p><p> 在开发环境下指定静态文件(index.html)的位置，会读取指定的index.html而不是HtmlWebpackPlugin生成的。对生产包没有影响。<br> 这个必须配合devServer.publicPath</p></li></ol><p><strong><a href="https://www.webpackjs.com/configuration/externals/#externals">externals</a></strong></p><blockquote><p>需要以require或import的方式使用，但已通过&lt;script&gt;链接了公共资源; 打包时需要忽略掉require的源码，这种情况下需要使用。</p></blockquote><ul><li>string<br><code>externals:{key: value}</code><br>key 表示在js中引用的变<br>value 表示CDN抛出的全局变量。如</li></ul><p><code>externals:{    &#39;$Vue&#39;: &#39;Vue&#39;}</code>, js中<code>import Vue from &#39;$Vue&#39;</code></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>配置<code>rules: [{   test: require.resolve(&#39;./src/index.js&#39;),   use: &#39;imports-loader?this=&gt;window&#39; }]</code>后，index.js文件内有<code>import numRef from &#39;./ref.json&#39;</code>引入json报错<code>ERROR in ./src/index.js 4:0Module parse failed: &#39;import&#39; and &#39;export&#39; may only appear at the top level (4:0)You may need an appropriate loader to handle this file type.</code></li></ol><p>2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR in chunk another [entry]</span><br><span class="line">[name].[chunkhash].js</span><br><span class="line">Cannot use [chunkhash] or [contenthash] for chunk in &apos;[name].[chunkhash].js&apos; (use [hash] instead)</span><br></pre></td></tr></table></figure><p>原因：热更新(HMR)不能和[chunkhash]同时使用。</p><ol start="3"><li><p>打包时，hash频繁变动? </p><p> 生产环境添加Plugins: new webpack.HashedModuleIdsPlugin()。<br> <strong>但是，当入口文件增加时，hash仍然会变化，怎么解？</strong></p><ol><li>公共包可以解决，将chunkFilename的名字不加上hash。</li></ol></li><li><p>node-sass安装不成功。</p><p> 如果遇到错误 error: xxxx node-sass: Command failed</p></li></ol><p>将 sass-binary-site 添加至 config 中</p><p><code>yarn config set sass-binary-site https://npm.taobao.org/mirrors/node-sass</code></p><p><code>npm config set sass-binary-site https://npm.taobao.org/mirrors/node-sass</code></p><p>指定 node-sass 从 npm 的淘宝源中下载。</p><ol start="5"><li><p>vue中的css被单独打包了，如果不想单独打包，怎么办？</p><p> 很简单，如果不需要单独打包，就别写在vue文件中。写在vue文件中，就会被单独打包。</p></li></ol><p>##应用</p><h3 id="模块热替换"><a href="#模块热替换" class="headerlink" title="模块热替换"></a><a href="https://www.webpackjs.com/guides/hot-module-replacement/#%E5%90%AF%E7%94%A8-hmr">模块热替换</a></h3><p><strong>不是配置webpack HMR后，就可以任意热替换所有的模块</strong>。<br>实际上是通过module.hot.accept来监控某个模块，如a.js, 然后运行a.js内某个方法。例如，修改之前a()是console.log(1);现在更改了a.js的a方法,改成了console.log(2)。热替换就是在module.hot.accept的回调里运行a()能保证是新的，也就是输出2。如果页面有绑定事件执行a()仍然是输出1。<br>所以不光是webpack.config配置，还是要在js中配合使用。</p><h3 id="css中使用alias"><a href="#css中使用alias" class="headerlink" title="css中使用alias"></a>css中使用alias</h3><p>只需要在开头加<code>~</code></p><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><ol><li><p>分包配置 <a href="https://juejin.im/post/5b99b9cd6fb9a05cff32007a">资料1</a> <a href="https://juejin.im/post/5af1677c6fb9a07ab508dabb">资料2</a> <a href="https://www.cnblogs.com/dashnowords/p/9545482.html">资料3</a> <a href="https://segmentfault.com/a/1190000010317802">资料4</a></p><blockquote><p>之前个人想法，是不是输出一个专门的入口包文件。事实上很蠢。因为包文件没有公布全局变量。</p></blockquote><p> 使用<code>optimization.splitChunks</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">   splitChunks: &#123;</span><br><span class="line">     chunks: &apos;initial&apos;,</span><br><span class="line">     cacheGroups: &#123;</span><br><span class="line">       vue: &#123;</span><br><span class="line">         name: &apos;vue-2.6.10&apos;,</span><br><span class="line">         test: /vue|vuex|vue-router/</span><br><span class="line">       &#125;,</span><br><span class="line">       react: &#123;</span><br><span class="line">         name: &apos;react-16.8.6&apos;,</span><br><span class="line">         test: /react|react-dom/</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 最麻烦的场景： 如有2个包jquery,lodash。在入口a.js中引入了其中一个jquery。在异步b.js中引了这2个。如果</p></li></ol><h3 id="webpack-vue配置"><a href="#webpack-vue配置" class="headerlink" title="webpack - vue配置"></a>webpack - vue配置</h3><ol><li><p>语法检查 eslint-plugin-vue</p><ol><li>安装 eslint-plugin-vue</li><li>eslintrc.js 增加extends: ‘plugin:vue/recommended’</li></ol></li><li><p>预处理</p><ol><li><p>安装 vue-loader, 提示安装vue-template-compiler</p></li><li><p>在webpack配置中增加plugins.</p><p> <code>const VueLoaderPlugin = require(&#39;vue-loader/lib/plugin&#39;);</code></p><p> <code>plugins: [new VueLoaderPlugin()]</code></p></li></ol></li></ol><ol start="3"><li><p>环境场景1: Vue在生产环境中使用CDN,开发环境中使用完整包</p><ol><li><p>dev.config:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">   alias: &#123;</span><br><span class="line">     $Vue: &apos;vue&apos;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 为什么要配置webpack.dev.config; 完全可以不用配置也能正常运行。但是打包的时候在app.js里面也会打进vue的源码。只有在dev使用alias,在prod使用externals，打包的时候不会打包vue源。这种原理同样适合所以的包。</p></li><li><p>prod.config:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">externals:&#123;</span><br><span class="line">  &apos;$Vue&apos;: &apos;Vue&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>html</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://library.theme.com/vue/dist/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;http://library.theme.com/vue-router/dist/vue-router.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;http://library.theme.com/vuex/dist/vuex.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>js</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;$Vue&apos;;</span><br><span class="line">if (process.env.NODE_ENV === &apos;development&apos;) &#123;</span><br><span class="line">  Vue.use(VueRouter);</span><br><span class="line">  Vue.use(Vuex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 并不需要引用vuex和vuerouter,开发环境和生产环境都用cdn就可以了。</p></li></ol></li><li><p>环境场景2：将vue及插件单独打包，不使用CDN。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">   splitChunks: &#123;</span><br><span class="line">     chunks: &apos;initial&apos;,</span><br><span class="line">     cacheGroups: &#123;</span><br><span class="line">       vue: &#123;</span><br><span class="line">         name: &apos;vue-2.6.10&apos;,</span><br><span class="line">         test: /vue|vuex|vue-router/</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将css打包成文件输出"><a href="#将css打包成文件输出" class="headerlink" title="将css打包成文件输出"></a>将css打包成文件输出</h3><p>使用<a href="https://www.npmjs.com/package/mini-css-extract-plugin">mini-css-extract-plugin</a></p><h3 id="css预处理"><a href="#css预处理" class="headerlink" title="css预处理"></a>css预处理</h3><ol><li>安装</li></ol><h3 id="js支持es6"><a href="#js支持es6" class="headerlink" title="js支持es6"></a>js支持es6</h3><h3 id="es7装饰器插件"><a href="#es7装饰器插件" class="headerlink" title="es7装饰器插件"></a>es7装饰器插件</h3><ol><li><p><code>yarn add @babel/plugin-proposal-decorators -D</code></p></li><li><p><code>&quot;plugins&quot;: [ [&quot;@babel/plugin-proposal-decorators&quot;, { &quot;legacy&quot;: true }],]</code></p></li></ol><p>注意: 要放在plugin-proposal-class-properties前面。</p><pre><code>[&apos;@babel/plugin-proposal-decorators&apos;, { &apos;legacy&apos;: true }],&apos;@babel/plugin-proposal-class-properties&apos;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;link&quot;&gt;&lt;a href=&quot;#link&quot; class=&quot;headerlink&quot; title=&quot;link&quot;&gt;&lt;/a&gt;link&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://doc.webpack-china.org/&quot;&gt;中文文档&lt;/a&gt;&lt;br&gt;&lt;strong&gt;待
      
    
    </summary>
    
    
      <category term="popular" scheme="1824437.github.io/categories/popular/"/>
    
    
      <category term="webpack" scheme="1824437.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>babel</title>
    <link href="1824437.github.io/popular/babel/babel/"/>
    <id>1824437.github.io/popular/babel/babel/</id>
    <published>2019-10-27T08:01:23.622Z</published>
    <updated>2019-10-27T08:09:10.852Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="popular" scheme="1824437.github.io/categories/popular/"/>
    
    
      <category term="babel" scheme="1824437.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>eslint</title>
    <link href="1824437.github.io/popular/eslint/eslint/"/>
    <id>1824437.github.io/popular/eslint/eslint/</id>
    <published>2019-10-27T08:01:06.006Z</published>
    <updated>2019-10-27T08:09:01.353Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="popular" scheme="1824437.github.io/categories/popular/"/>
    
    
      <category term="eslint" scheme="1824437.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>SASS</title>
    <link href="1824437.github.io/web/sass/sass/"/>
    <id>1824437.github.io/web/sass/sass/</id>
    <published>2019-10-27T08:00:39.373Z</published>
    <updated>2019-10-27T08:11:35.340Z</updated>
    
    <content type="html"><![CDATA[<p>语法大全 <a href="https://www.sass.hk/docs/">https://www.sass.hk/docs/</a></p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li>一个变量不存在时，引用该变量的样式声明会被删除。</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li><p>嵌套</p><ul><li>声明嵌套</li><li>属性嵌套</li><li>父选择器 &amp;</li></ul></li><li><p>占位符 %</p></li><li><p>注释/* */, //, 其中 //注释在编译时删除</p></li><li><p>变量 $</p><ul><li><p>局部变量变全局变量添加!global声明<code>$width: 12px !global</code>  </p></li><li><p>特殊变量, 一个复合值如font:”12px/1.5”;需要#{vername}</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$var1:12px;$var2:1.5;$var3=.header; </span><br><span class="line">font:#&#123;$var1&#125;/#&#123;$var2&#125; </span><br><span class="line">.main #&#123;$var3&#125;:after&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义变量值为多个值时，如字体，应该用#{}</p><p><code>$ff: #{&quot;Helvetica Neue&quot;, Helvetica, STHeiTi, sans-serif, st}</code></p></li><li><p>数组，map</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$px2</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line"><span class="variable">$px3</span>: <span class="number">10px</span> <span class="number">20px</span>, <span class="number">30px</span> <span class="number">40px</span>; <span class="comment">//分组</span></span><br><span class="line"><span class="variable">$px4</span>: (<span class="number">10px</span> <span class="number">20px</span>) (<span class="number">30px</span> <span class="number">40px</span>); <span class="comment">//分组</span></span><br><span class="line"><span class="variable">$util</span>: (padding:<span class="number">20px</span>,margin:<span class="number">30px</span>); <span class="comment">//对象</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>运算</p><ul><li>数字运算符 +, -, *, /,%</li><li>关系运算符 &lt;, &gt;, &lt;=, &gt;=</li><li>相等 == !=</li><li>插值#{}<br>  <code>content:&quot;a#{1+3}c&quot;</code></li><li>布尔运算 and, or, not  </li></ul></li></ol><ol start="6"><li><p>函数</p><p> 所有函数列表<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html">http://sass-lang.com/documentation/Sass/Script/Functions.html</a></p><ul><li><p>常用</p><ul><li>ie-hex-str()</li><li>nth()</li><li>map-get()</li></ul></li><li><p>自定义函数 @function</p></li></ul></li><li><p>默认值 !default 未定义的变量取带默认值的值，否则不取默认值</p></li><li><p>@import 导入sass文件</p><ul><li><p>与CSS原生的@import的区分：当发生以下情况不会使用sass解析</p><ol><li><p>文件扩展名是.css</p></li><li><p>文件名以协义开头</p></li><li><p>使用url()包裹文件</p></li><li><p>带有媒体查询的<br><code>@import url(&quot;//qunarzz.com/css/reset.css&quot;) screen</code></p></li><li><p>以上情况除外即使不在扩展名也会查找sass文件，找到即导入。 </p></li><li><p>当scss文件不想被处理时，在文件改名，前加下划线即可。<br> <code>_a.scss; @import a.scss</code></p></li><li><p>不可以在混合指令mixin或控制指令(if,for…)中使用导入。</p></li></ol></li></ul></li><li><p>@media 支持媒体查询，支持动态变量插入</p></li><li><p>@extend 样式继承<code>.a{} .b{@extend .a;}</code></p><ul><li><p>样子继承会无限继承底层样式及超类自身继承的样式。所以在.a下定义的其它样式都会继承，所以.a @extend的样式也会被继承。</p></li><li><p>可以继承多个超类，如发生冲突，后定义的会覆盖先定义的。</p></li><li><p>使用%占位继承,%定义部分单独使用不会生效</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#a h1%level&#123;color:red&#125;;</span><br><span class="line">//a h1不会有color:red样式</span><br><span class="line">.l3 &#123;@extend %level&#125;</span><br><span class="line">// #a h1.l3 &#123;color:red;&#125;</span><br></pre></td></tr></table></figure></li><li><p>在指令中扩展时，只能扩展指令内部的样式，外部样式不能。</p></li></ul></li><li><p>控制指令 @if @else if @else @for @each @while</p><p><code>@if &lt;condition&gt; {} @else {}</code></p></li></ol><ol start="12"><li><p>混合指令 mixin</p><ul><li><p>@include来应用混合</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> fonts &#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;@<span class="keyword">include</span> fonts&#125;</span><br></pre></td></tr></table></figure></li><li><p>加入参数</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数名格式与定义变量是一样的</span></span><br><span class="line">@<span class="keyword">mixin</span> fonts (<span class="variable">$color</span>, <span class="variable">$fontsize</span>) &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="variable">$fontsize</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;@<span class="keyword">include</span> fonts&#125;</span><br></pre></td></tr></table></figure></li><li><p>不定参数    (和JS解构赋值及剩余参数差不多）</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> fonts (<span class="variable">$args</span>...)&#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="variable">$args</span></span><br><span class="line">&#125;</span><br><span class="line">.a&#123;@include fonts(<span class="number">9px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">#555</span>)&#125;</span><br><span class="line">//或者</span><br><span class="line"><span class="variable">$xxx</span> = <span class="number">9px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line"><span class="selector-class">.a</span>&#123;@<span class="keyword">include</span> fonts(<span class="variable">$xxx</span>...)</span><br></pre></td></tr></table></figure></li></ol><p>-</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li><p>global-variable-exists</p><p>  检查一个全局变量(<code>! global</code>)是否存在,变量名引用不需要$<br>  <code>@if global-variable-exists(){}</code></p></li></ul><h2 id="变量-map变量-list变量-特殊变量"><a href="#变量-map变量-list变量-特殊变量" class="headerlink" title="变量; map变量; list变量; 特殊变量;"></a>变量; map变量; list变量; 特殊变量;</h2><p><strong>定义</strong>  </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$px</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="variable">$px2</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line"><span class="variable">$px3</span>: <span class="number">10px</span> <span class="number">20px</span>, <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line"><span class="variable">$px4</span>: (<span class="number">10px</span> <span class="number">20px</span>), (<span class="number">30px</span> <span class="number">40px</span>);</span><br><span class="line"><span class="variable">$util</span>: (padding:<span class="number">20px</span>,margin:<span class="number">30px</span>);</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$px1</span>; <span class="comment">// 20px;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: nth(<span class="variable">$px2</span>,<span class="number">3</span>); <span class="comment">// 30px;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: nth(<span class="variable">$px3</span>,<span class="number">1</span>); <span class="comment">// 10px 20px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.d</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: nth(<span class="variable">$px4</span>,<span class="number">2</span>); <span class="comment">//30px 40px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.e</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: map-get(<span class="variable">$util</span>,padding); <span class="comment">// 20px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="占位符号"><a href="#占位符号" class="headerlink" title="占位符号"></a>占位符号</h2><p><strong>定义</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%<span class="selector-tag">base</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">10px</span>;<span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">@<span class="keyword">extend</span> %base; <span class="comment">//margin:10px;padding:20px;</span></span><br><span class="line"><span class="attribute">color</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p><strong>使用</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">10px</span>;</span><br><span class="line">&amp;:hover&#123; <span class="comment">// .a:hover</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="selector-class">.title</span>&#123; <span class="comment">// .a .title</span></span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&amp;_bd&#123; <span class="comment">// .a .title_bd</span></span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">border</span>:&#123;</span><br><span class="line">style: solid;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">left</span>: &#123; // border-left</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;语法大全 &lt;a href=&quot;https://www.sass.hk/docs/&quot;&gt;https://www.sass.hk/docs/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;规则&quot;&gt;&lt;a href=&quot;#规则&quot; class=&quot;headerlink&quot; title=&quot;规则&quot;&gt;&lt;/a&gt;规则
      
    
    </summary>
    
    
      <category term="web" scheme="1824437.github.io/categories/web/"/>
    
    
      <category term="sass" scheme="1824437.github.io/tags/sass/"/>
    
      <category term="css" scheme="1824437.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>字符集及编码</title>
    <link href="1824437.github.io/web/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%8F%8A%E7%BC%96%E7%A0%81/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%8F%8A%E7%BC%96%E7%A0%81/"/>
    <id>1824437.github.io/web/字符集及编码/字符集及编码/</id>
    <published>2019-10-27T07:48:08.782Z</published>
    <updated>2019-10-27T08:11:42.023Z</updated>
    
    <content type="html"><![CDATA[<h3 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h3><p>后端在往页面上（如js变量,textarea值)串化的json字符串时，一定要再串化一下；否则串化在字串在浏览器处理过</p><p>-</p><ol><li><h3 id="encodeURI，encodeURIComponent两个方法的区别？"><a href="#encodeURI，encodeURIComponent两个方法的区别？" class="headerlink" title="encodeURI，encodeURIComponent两个方法的区别？"></a>encodeURI，encodeURIComponent两个方法的区别？</h3><blockquote><p>这两个方法是将字符转换是UTF-8编码；以%开头。<br>encodeURI为要的作用是对url中的<strong>不利于传递的字符进行编码</strong><br> 像中文字符按照《RFC 1738》规定，汉字必须编码；但怎么编，自行决定。<br> 所以，页面的字符编码与服务器端解码不一样，那么就会得到乱码。<br> encodeURI就是固定使用utf-8的对字串进行编码，但排除了一些字符。</p></blockquote><blockquote><p>encodeURIComponent的作用是如果一个URL里面的<strong>某个参数也是一个url</strong><br>这样的话，这个URL就有了二义性，如下：<br>“<a href="http://www.b.com?a=100&amp;b=www.c.com?y=100&amp;z=200&quot;">http://www.b.com?a=100&amp;b=www.c.com?y=100&amp;z=200&quot;</a><br>所以，当一个url的参数包括另一个url的话，这个作为参数值的url必须encodeURIComponent编码。</p></blockquote></li><li><h3 id="字符集-ASCII-GB-18030-2005-Unicode-latin-1"><a href="#字符集-ASCII-GB-18030-2005-Unicode-latin-1" class="headerlink" title="字符集 ASCII, GB 18030-2005, Unicode, latin-1"></a>字符集 ASCII, GB 18030-2005, Unicode, latin-1</h3><ul><li><p>ASCII 共128个字符，7bit二进制表示，code point </p></li><li><p>latin-1 共256个字符，8位表示，在ascii基础上增加了</p></li><li><p>GB 18030-2005, 中国搞的一套最新字符集，之前有过几个版版像GB2312-80<br>  unicode中的汉字编码与GB 18030-2005是兼容的，或者说是按照中国的标准搬到unicode的码点上的。</p></li><li><p><strong>Unicode，最全的字符集，及无限的扩展</strong><br>  <a href="http://thoughtfly.iteye.com/blog/977495">0平面区间含义</a></p><ul><li><p>编号规则<br>用16进制编号从0-10ffff，共1114111个码位，能代表1114111个字符，把这些码位分成了17个平面； 或者说每次增加就定义一个平面，共定义了17个平面，容纳1114111个字符。</p><table><thead><tr><th>平面</th><th>码位段</th><th>名称</th><th>英文名称</th></tr></thead><tbody><tr><td>0</td><td>U+0000 - U+FFFF</td><td>基本多文种平面</td><td>Basic Multilingual Plane</td></tr><tr><td>1</td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td></tr><tr><td>4-13</td><td></td><td>未使用</td><td></td></tr><tr><td>14</td><td></td><td>特别用途补充平面</td><td>supplementary special-purpose plane</td></tr><tr><td>15</td><td></td><td>保留作为私人使用区</td><td>private use area</td></tr><tr><td>16</td><td></td><td>保留作为私人使用区</td><td></td></tr></tbody></table></li></ul></li></ul></li></ol><ol start="3"><li><p>编码方案    </p><ul><li><p>UCS2 与 UCS4</p><p>  UCS2 被整合到了<strong>UTF-16</strong>里面。<br>  UCS2 就是用2个字节来代表码点，两个字节意味着：<br>  二进制值00000000 00000000 - 11111111 11111111<br>  十六进制值 0x0000 - 0xffff<br>  十进制值是 0 - 65535<br>  对应就是unicode字符集的0平面。</p><p>  UCS4 被整合到了<strong>UTF-32</strong>里面。用4个字节代表码点。<br>  二进制 4个8位，太长不写了。<br>  十六进制 0x 00 00 00 00 - 0x FF FF FF FF<br>  十进制 0-4294967295<br>  能代表unicode现有的17个平面及未来扩展。 </p></li><li><p>UTF-32<br>  用位来表示一个字符，和unicode一一对应<br>  最大的二进制与16进制<br>  11111111 11111111 11111111 11111111 -&gt; ff ff ff ff<br>  缺点：<br>  代表字母a,ascii码的16进制为 61，而utf-32则是00 00 00 61,存放空间多了三位。</p></li><li><h4 id="UTF-8-可变长的编码方案"><a href="#UTF-8-可变长的编码方案" class="headerlink" title="UTF-8 可变长的编码方案"></a>UTF-8 可变长的编码方案</h4><ul><li>unicode转码方案</li></ul><table><thead><tr><th>unicode码点范围</th><th>转换字节数</th><th>转换规则</th><th></th></tr></thead><tbody><tr><td>0x0000 - 0x007f</td><td>1</td><td>7位二进制（对应ascii标准表的128个字符）转8位2进制，前面加0</td><td>0平面</td></tr><tr><td>0x0080 - 0x07FF</td><td>2</td><td>110xxxxx 10xxxxxx</td><td>0平面</td></tr><tr><td>0x0800 - 0xFFFF</td><td>3</td><td>1110xxxx 10xxxxxx 10xxxxxx</td><td>0平面</td></tr><tr><td>0x010000 - 0x10FFFF</td><td>4</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td><td>1-16平面</td></tr><tr><td>2，3，4字节的转换方法一样，设字节数为n，在第一个字节前面加n个1，n+1位上加个0(也就是紧跟着加个0)，后面的字节均加10.</td><td></td><td></td><td></td></tr></tbody></table><ul><li><p>unicode 转 utf8 </p><p>例“朱” unicode 码点 0x6731,按规则，转3个字符， 转2进制110 011100 110001;长度不够，先在前面补0 -&gt; 0110 011100 110001；再根据规则补：<br>1110 0110 10 011100 10 110001；最后转成16进制utf-8的字节序为e6 9c b1</p></li></ul></li><li><p>UTF-16编码</p><ul><li><p>编码规则</p><table><thead><tr><th>unicode code point</th><th>存储字节数</th></tr></thead><tbody><tr><td>0x0000 - 0xffff</td><td>2个字节</td></tr><tr><td>0x010000 - 0x10ffff</td><td>4个字节</td></tr></tbody></table></li><li><h4 id="高低位"><a href="#高低位" class="headerlink" title="高低位"></a>高低位</h4><p>  在unicode 0平面中有一个码段未被使用，utf-16利用了这一码段。<br>  0xd800 - 0xdfff ,一共2048个码点。<br>  高位 0xd800 - 0xdbff,1024个<br>  低位 0xdc00 0 0xdfff,1024个</p></li><li><p>utf-16编码与unicode的码点的对应关系：  </p><p>  2个字节的，与0平面一一对应。<br>  4个字节的，使用高低位组合：<br>  高位与低位可以组合出1024*1024 = 1048576个编码<br>  而除了0平面，码点范围0x010000 - 0x10ffff的码点正好也是1048576<br>  所以，utf16用高低位4个字节与unicode的非0平面作了一一对应。<br>  所以，当uft16编码中遇到高位编码肯定不是代表某个字符，因为码位上没有字符，而且高位的后边一定会跟着一个低位编码，这样就成了一个4字节编码。然后通过公式找到unicode码位。</p></li><li><p>utf-16与unicode的转换</p><p>  2个字节的直接相等。<br>  4个字节的：<br>  高位 Math.floor((codePoint - 0x010000) / 0x400) + 0xd800<br>  低位 (codePoint - 0x010000)%0x400 + 0xdc00  </p><p>  例：𝌆 unicode code point u+1d306<br>  高位 Math.floor((0x1d306 - 0x010000) / 0x400) + 0xd800 =0xd834<br>  低位 (0x1d306 - 0x010000) % 0x400 + 0xdc00 = 0xdf06<br>  utf16编码为 0x d834 df06</p></li></ul></li></ul></li></ol><ol start="3"><li><h3 id="输入码-区位码-国标码-机内码"><a href="#输入码-区位码-国标码-机内码" class="headerlink" title="输入码, 区位码, 国标码, 机内码"></a>输入码, 区位码, 国标码, 机内码</h3><ul><li>输入码，就是各种中文输入法</li><li>区位码，橫94区纵94位映射的中文字符集 gb2312</li><li>国标码，GB 18030-2005。</li><li>机内码，十六进制的码位（码点 code-point）。</li></ul></li><li><h3 id="bom字符（字节序）了解更多-2-3"><a href="#bom字符（字节序）了解更多-2-3" class="headerlink" title="bom字符（字节序）了解更多 2 3"></a>bom字符（字节序）<a href="http://unicode.org/faq/utf_bom.html#BOM">了解更多</a> <a href="http://7567567.blog.51cto.com/706378/641744">2</a> <a href="http://www.cnblogs.com/flysnail/archive/2011/10/25/2223721.html">3</a></h3><ul><li><p>bom字符，表明该文件的编码方式；存放于文档头</p><table><thead><tr><th>字节</th><th>编码格式</th></tr></thead><tbody><tr><td>00 00 FE FF</td><td>UTF-32BE</td></tr><tr><td>FF FE 00 00</td><td>UTF-32LE</td></tr><tr><td>FE FF</td><td>UTF-16BE</td></tr><tr><td>FF FE</td><td>UTF-16LE</td></tr><tr><td>EF BB BF</td><td>UTF-8</td></tr></tbody></table></li></ul></li></ol><pre><code>utf-8中，以单字节（8bit)为编码单位，&quot;357\273\277&quot;用8进制表示的；读取异常可以删掉。地超过1字节的编码方案中，utf16,32；bom是必须的，分为大端序，小端序。  大端字节序，高字节存于内存低地址，低字节存于内存高地址；小端字节序反之。   例：  &quot;𝌆&quot;字，unicode codePoint : u+1d306,   utf-16编码为:0x d8 34 df 06, 占四字节  大端序 d8 34 df 06 , 小端序 06 df 34 d8  为啥要这么搞，因为win是小端序，mac用大端序。  所以才搞个bom告诉你，你要怎么读这个文件。</code></pre><ol start="4"><li><h3 id="javascript相关字符的问题"><a href="#javascript相关字符的问题" class="headerlink" title="javascript相关字符的问题"></a>javascript相关字符的问题</h3><ul><li><p>javascript允许直接使用codePoint表示字符。<br>  es6前支持utf-16；0平面使用 \u&lt;4位codePoint&gt;<br>  非0平面的字符可以使用高低位，如：<br>  𝌆  “\ud834\udf06”;<br>  如何转? </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>, x = <span class="string">"a中𝌆"</span>, output = [];</span><br><span class="line"><span class="keyword">while</span> (i &lt; x.length)&#123;</span><br><span class="line"><span class="keyword">let</span> codePoint = x[i].charCodeAt().toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(codePoint&lt;<span class="number">127</span>)&#123;</span><br><span class="line">output.push(<span class="string">"\\x"</span> + codePoint);</span><br><span class="line">i++; </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (codePoint &gt;=<span class="number">0xd800</span> &amp;&amp; codePoint&lt;= <span class="number">0xdbff</span>)&#123;</span><br><span class="line">output.push(<span class="string">"\\u"</span> </span><br><span class="line">+ codePoint.toString(<span class="number">16</span>) </span><br><span class="line">+  <span class="string">"\\u"</span></span><br><span class="line">+  x[++i].charCodeAt().toString(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">output.push(<span class="string">"\\u"</span> + codePoint.toString(<span class="number">16</span>));</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(output.join(<span class="string">""</span>)+ <span class="string">""</span>);</span><br></pre></td></tr></table></figure><p>  这个值只能在js里用。html不支持utf-16编码；<br>  html里面直接 “&amp;#” + “𝌆”.codePointAt() + “;”;</p><p>  es6:支持unicode全集, 0平面不变，非0平面用 \u{&lt;4位以上codePoint&gt;}<br>  𝌆 “\ud834\udf06” 或 “\u{1d306}”<br>  所以，”𝌆”.length = 2;<br>  所以，”a中𝌆” 用for in 遍历4次，而for of 遍历3次（es6)  </p><p>  如果字符串范围超出了0平面，那么得到准确的字串的个数可以用           Array.from(str).length;</p><p>  0平面字符处理与非0平面的不同：<br>  “a中”.charAt(1) // 中<br>  “a中”.charCodeAt(1).toString(16) // 4e2d<br>  String.fromCharCode(0x4e2d) // 中</p><p>  “a𝕄”.codePointAt(1) // 1d544<br>  String.fromCodePoint(0x1d544); // 𝕄</p></li><li><p>支持8位的latin-1字符。 用\x&lt;2位codePoint&gt;</p></li></ul></li></ol><ol start="5"><li><h3 id="html-相关字符的问题"><a href="#html-相关字符的问题" class="headerlink" title="html 相关字符的问题"></a>html 相关字符的问题</h3><ol><li><p>支持所有unicode码点；支持10进制和16进制,支持32位<br>中国 = &amp;#20013;&amp;#22269;<br>  = &amp;#x4e2d;&amp;#x56fd;<br>𝕄 = &amp;#120132; = &amp;#x1d544;</p></li><li><p>支持实体, 如空格 &nbsp;</p></li></ol></li><li><h3 id="换行符的问题"><a href="#换行符的问题" class="headerlink" title="换行符的问题"></a>换行符的问题</h3><p> <a href="http://www.cnblogs.com/del/archive/2009/03/06/1404959.html">unicode速查表</a></p><p> 在文本处理中, CR, LF, CR/LF是不同操作系统上使用的换行符。<br> Dos和windows采用回车+换行CR/LF表示下一行,<br> 而UNIX/Linux采用换行符LF表示下一行，<br> 苹果机(MAC OS系统)则采用回车符CR表示下一行.<br> CR，回车控制符。用符号’\r’表示, 十进制ASCII代码是13, 十六进制代码为0x0D;<br> LF，换行控制符。使用’\n’符号表示, ASCII代码是10, 十六制为0x0A.<br> 所以Windows平台上换行在文本文件中是使用 0d 0a 两个字节表示, 而UNIX和苹果平台上换行则是使用0a或0d一个字节表示。</p><p> 还有一些码位能造成换行如：codePoint 2028-202f</p><p> 引发换行用此正则可替换（0平面）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> delControllerSting = <span class="regexp">/[\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span>;</span><br></pre></td></tr></table></figure></li><li><h3 id="css伪元素content的值"><a href="#css伪元素content的值" class="headerlink" title="css伪元素content的值"></a>css伪元素content的值</h3><p> unicode 0区 e000-f8ff 自行使用区域  Private Use Zone  </p><p> <code>:before {content:&quot;\0020&quot;} //用反斜线+4位16进制,0020是空格</code></p></li><li><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><ul><li><p>JSON无法解析</p><blockquote><p>一个json对象的属性包含了另一个json对象的串化，后端要求解析这个属性成为一个大json对象<br>  因为这个属性之前是单独串化的，故引号做了一次转义。<br>  而这次修改后，老数据后端在页面上通过JS变量返回给前台的时候，这个大json以字串返回，但感觉并没有串化，仅仅只是在外加了个单引号（恰好里面都是双引号，json标准格式）;正常应该将转义符再转一次，也就是\变\。<br>  前端处理时，已无法处理。因为仅一次转义符已在script变量定义时消费掉了。双引号被正常解析，如下举例：  </p></blockquote>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'&#123;"a":"&lt;p style=\"color:red;\"&gt;&lt;/p&gt;"&#125;'</span></span><br><span class="line"><span class="comment">//这是html源码字串，而js获得字串时已解析成</span></span><br><span class="line"><span class="string">'&#123;"a":"&lt;p style="color:red;"&gt;&lt;/p&gt;"&#125;'</span></span><br><span class="line"><span class="comment">//再通过JSON.parse时，color前面的双引号被正常解析，</span></span><br><span class="line"><span class="comment">//故后面的语法全错了。</span></span><br></pre></td></tr></table></figure><blockquote><p>最后将外加的单引号去掉，前端直接获得json对象。<br>  其实后端拍之前串化一次也可以，而不是仅仅外加单引号。<br>  <code>&#39;{&quot;a&quot;:&quot;&lt;p style=\\&quot;color:red;\\&quot;&gt;&lt;/p&gt;&quot;}&#39;</code></p></blockquote><p>  此坑还有个背景，以为是特殊字符导致的。因为json串里有html串，以前经常发生串里有能产生换行的字符导致无法正常解析，恰好这次里面发现了一个\u2003，后来发现并不是它的问题。</p></li></ul></li></ol><h3 id="Nodejs-request-URL-中文乱码"><a href="#Nodejs-request-URL-中文乱码" class="headerlink" title="{Nodejs} request URL 中文乱码"></a>{Nodejs} request URL 中文乱码</h3><p>浏览器端发送请求时, 浏览器已处理过请求中的中文字符; node端需要手动处理: encodeURI(url)，不处理就会出现乱码。</p><h3 id="IE浏览器中文乱码"><a href="#IE浏览器中文乱码" class="headerlink" title="IE浏览器中文乱码"></a>IE浏览器中文乱码</h3><p>ie没有自动编码，在get模式下出现乱码，encodeURI(url)可解</p><h3 id="浏览器直接访问JS文件，-中文乱码"><a href="#浏览器直接访问JS文件，-中文乱码" class="headerlink" title="浏览器直接访问JS文件， 中文乱码"></a>浏览器直接访问JS文件， 中文乱码</h3><p>需要在Ng中配置<code>http{ charset UTF-8;}</code></p><h3 id="kindediter-粘贴html片段后，存为json-string；再parse时异常"><a href="#kindediter-粘贴html片段后，存为json-string；再parse时异常" class="headerlink" title="kindediter 粘贴html片段后，存为json string；再parse时异常"></a>kindediter 粘贴html片段后，存为json string；再parse时异常</h3><p>原因是font-family中有中文字体；中文字体有引号(在innerHTML时被转义&amp;quot),引号在解析的时候变成了双引号与JSON格式中的双引号冲突。</p><ol><li><code>movePastedData()</code> //没改变</li><li><code>_formatHtml()</code> //删除了转义了的中文字体的尾引号<br>这样问题就产生了，最后生成的html符中有一个独立的&amp;quot,parse字串的时候这个被转成”号。<br>最后，将html串的style属性去除。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;warning&quot;&gt;&lt;a href=&quot;#warning&quot; class=&quot;headerlink&quot; title=&quot;warning&quot;&gt;&lt;/a&gt;warning&lt;/h3&gt;&lt;p&gt;后端在往页面上（如js变量,textarea值)串化的json字符串时，一定要再串化一下；否则串化在
      
    
    </summary>
    
    
      <category term="web" scheme="1824437.github.io/categories/web/"/>
    
    
      <category term="字符集" scheme="1824437.github.io/tags/%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    
      <category term="编码" scheme="1824437.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
